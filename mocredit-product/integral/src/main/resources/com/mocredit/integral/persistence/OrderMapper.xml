<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mocredit.integral.persistence.OrderMapper">
    <insert id="save" parameterType="com.mocredit.integral.entity.Order">
        insert into
        `ti_order`(request_id,card_num,store_id,activity_id,amt,order_id,old_order_id,en_code,card_exp_date,ctime,`status`,batch_no,search_no,msg,is_success)
        values(#{t.requestId},#{t.cardNum},#{t.storeId},#{t.activityId},#{t.amt},#{t.orderId},#{t.oldOrderId},#{t.enCode},#{t.cardExpDate},now(),#{t.status},#{t.batchno},#{t.searchno},#{t.msg},#{t.isSuccess})
    </insert>
    <sql id="Base_Column">
        a.uuid as uuid,
		a.order_id as orderId,
		a.old_order_id as oldOrderId,
		a.activity_id as activityId,
		a.store_id as storeId,
		a.status as status,
		a.en_code as enCode,
		a.card_num as cardNum,
		a.amt as amt,
		a.ctime as
		createTime,
		a.card_exp_date as cardExpDate,
		a.batch_no as batchno,
		a.search_no as searchno,
		a.msg as msg,
		a.is_success as isSuccess
	</sql>
    <sql id="findOrderByList_Base_Column">
        <if test="t.orderNo!=null">
            AND a.order_id =#{t.orderNo}
        </if>
        <if test="t.startTime!=null">
            AND a.ctime >=#{t.startTime}
        </if>
        <if test="t.endTime!=null">
            AND a.ctime &lt;=#{t.endTime}
        </if>
        <if test="t.storeId!=null">
            AND a.store_id =#{t.storeId}
        </if>
        <if test="t.activityId!=null">
            AND a.activity_id=#{t.activityId}
        </if>
        <if test="t.activityName!=null">
            AND b.activity_name like CONCAT('%','${t.activityName}','%')
        </if>
        <if test="t.enterpriseName!=null">
            AND b.pub_enterprise_name like CONCAT('%','${t.enterpriseName}','%')
        </if>
        <if test="t.enCode!=null">
            AND a.en_code like CONCAT('%','${t.enCode}','%')
        </if>
        <if test="t.cardNo!=null">
            AND a.card_num like CONCAT('%','${t.cardNo}','%')
        </if>
        <if test="t.storeName!=null">
            AND c.store_name like CONCAT('%','${t.storeName}','%')
        </if>
        <if test="t.statusList!=null">
            AND a.`status` IN
            <foreach item="item" index="index" collection="t.statusList" open="("
                     separator="," close=")">
                ${item}
            </foreach>
        </if>
    </sql>
    <select id="getOrderByOrderId" resultType="com.mocredit.integral.entity.Order">
        select
        <include refid="Base_Column"/>
        from
        `ti_order` a where order_id=#{orderId}
    </select>
    <select id="getOrderBySearchNoAndBatchNo" resultType="com.mocredit.integral.entity.Order">
        select
        <include refid="Base_Column"/>
        from
        `ti_order` a where search_no=#{searchno} and batch_no=#{batchno}
    </select>
    <update id="updateStatusByOrderId">
		update `ti_order`
		set
		status=#{status} where
		order_id=#{orderId}
	</update>
    <select id="isExistOrder" resultType="int">
		select count(1) from
		`ti_order` where order_id=#{orderId}
	</select>
    <select id="isExistOldOrder" resultType="int">
        select count(1) from
        `ti_order` where old_order_id=#{orderId} and is_success=1
    </select>
    <select id="synOrder" resultType="com.mocredit.integral.dto.OrderDto">
        select
        a.uuid as id,
        a.order_id
        as orderId,
        a.activity_id as activityId,
        b.activity_name as
        activityName,
        b.pub_enterprise_id as enterpriseId,
        b.pub_enterprise_name as
        enterpriseName,
        a.shop_id as supEnterpriseId,
        a.shop_name as
        supEnterpriseName,
        a.store_id as storeId,
        a.store_name as
        storeName,
        a.status as status,
        b.start_time as startTime,
        b.end_time as
        endTime,
        a.bank as bank,
        a.card_num as cardNum,
        a.amount as integral,
        a.ctime as
        createTime
        from ti_order a left join ti_activity b on
        a.activity_id=b.activity_id
        order by a.uuid asc limit
        #{offset},#{pagesize}
    </select>

    <select id="findOrderByList" resultType="java.util.HashMap" parameterType="com.mocredit.integral.dto.OrderDto">
        select a.order_id as orderId,
        b.pub_enterprise_name as enterpriseName,
        c.shop_name as shopName,c.store_name as storeName,
        b.activity_name as activityName,a.en_code as enCode,
        a.ctime as orderTime,a.amt as amt,a.card_num as cardNo, a.`status` as `status`,a.msg as msg
        from ti_order a LEFT JOIN ti_activity b ON a.activity_id=b.activity_id LEFT JOIN ti_store c ON
        a.store_id=c.store_id and a.activity_id=c.activity_id WHERE 1=1
        AND a.uuid &lt;=(
        SELECT a.uuid
        FROM ti_order a LEFT JOIN ti_activity b ON a.activity_id=b.activity_id LEFT JOIN ti_store c ON
        a.store_id=c.store_id AND a.activity_id=c.activity_id WHERE 1=1
        <include refid="findOrderByList_Base_Column"/>
        ORDER BY a.uuid DESC limit #{t.offset},1)
        <include refid="findOrderByList_Base_Column"/>
        ORDER BY a.uuid DESC limit #{t.pageSize}
    </select>

    <select id="findOrderByListCount" resultType="int" parameterType="com.mocredit.integral.dto.OrderDto">
        select count(1)
        from ti_order a LEFT JOIN ti_activity b ON a.activity_id=b.activity_id
        LEFT JOIN ti_store c ON
        a.store_id=c.store_id and a.activity_id=c.activity_id
        WHERE 1=1
        <include refid="findOrderByList_Base_Column"/>
    </select>
    <select id="statActIntegral" resultType="java.util.HashMap">
    SELECT verifyCount,(payCount-revokeCount) AS exchangeCount FROM ( SELECT
        (SELECT COUNT(1) FROM ti_order WHERE  activity_id=#{activityId}) AS verifyCount,
        (SELECT COUNT(1) FROM ti_order WHERE  activity_id=#{activityId} AND is_success=1 AND old_order_id IS NULL) AS payCount,
        (SELECT COUNT(DISTINCT(old_order_id)) FROM ti_order WHERE  activity_id=#{activityId} AND old_order_id IN(
           SELECT order_id FROM ti_order WHERE  activity_id=#{activityId}  AND is_success=1 AND old_order_id IS NULL
        )) AS revokeCount
        FROM DUAL)a
    </select>
    <select id="statActStoreIntegral" resultType="java.util.HashMap">
        SELECT verifyCount,(payCount-revokeCount) AS exchangeCount FROM ( SELECT
        (SELECT COUNT(1) FROM ti_order WHERE  activity_id=#{activityId} AND store_id=#{storeId}) AS verifyCount,
        (SELECT COUNT(1) FROM ti_order WHERE  activity_id=#{activityId} AND store_id=#{storeId} AND is_success=1 AND old_order_id IS NULL) AS payCount,
        (SELECT COUNT(DISTINCT(old_order_id)) FROM ti_order WHERE  activity_id=#{activityId} AND store_id=#{storeId} AND old_order_id IN(
           SELECT order_id FROM ti_order WHERE  activity_id=#{activityId} AND store_id=#{storeId} AND is_success=1 AND old_order_id IS NULL
        )) AS revokeCount
        FROM DUAL)a
    </select>
</mapper>
